<?xml version="1.0" encoding="UTF-8" ?> <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Zeki&#39;s Note</title><link>https://zekixfly.github.io/<description>Do not ignore your intuition. Sometime, it&#39;s always right.</description><lastbuilddate>Mon, 20 Jan 2025 03:06:41 +0000</lastbuilddate><atom:link href="https://zekixfly.github.io//feeds.xml" rel="self" type="application/rss+xml"/><item><title>Reverse Words in a String</title><link>https://zekixfly.github.io//reverse-words-in-a-string/<description>LeetCode題目: 151. Reverse Words in a String My solution: /** * @param {string} s * @return {string} */ let reverseWords = s =&amp;gt; s.replace(/&#92;s+/g,&amp;#x27;...</description><pubdate>Mon, 20 Jan 2025 04:01:00 +0000</pubdate><guid>https://zekixfly.github.io//reverse-words-in-a-string/</guid></item><item><title>Reverse Vowels of a String</title><link>https://zekixfly.github.io//reverse-vowels-of-a-string/<description>LeetCode題目: 345. Reverse Vowels of a String My solution: /** * @param {string} s * @return {string} */ let reverseVowels = s =&amp;gt; { if(s.length &amp;lt...</description><pubdate>Wed, 15 Jan 2025 15:43:00 +0000</pubdate><guid>https://zekixfly.github.io//reverse-vowels-of-a-string/</guid></item><item><title>Can Place Flowers</title><link>https://zekixfly.github.io//can-place-flowers/<description>LeetCode題目: 605. Can Place Flowers My solution: /** * @param {number[]} flowerbed * @param {number} n * @return {boolean} */ let canPlaceFlowers = (flo...</description><pubdate>Wed, 15 Jan 2025 08:02:00 +0000</pubdate><guid>https://zekixfly.github.io//can-place-flowers/</guid></item><item><title>Kids With the Greatest Number of Candies</title><link>https://zekixfly.github.io//kids-with-the-greatest-number-of-candies/<description>LeetCode題目: 1431. Kids With the Greatest Number of Candies My solution: /** * @param {number[]} candies * @param {number} extraCandies * @return {boolea...</description><pubdate>Tue, 14 Jan 2025 09:50:00 +0000</pubdate><guid>https://zekixfly.github.io//kids-with-the-greatest-number-of-candies/</guid></item><item><title>Merge Strings Alternately</title><link>https://zekixfly.github.io//merge-strings-alternately/<description>LeetCode題目: 1768. Merge Strings Alternately My solution: /** * @param {string} word1 * @param {string} word2 * @return {string} */ let mergeAlternately...</description><pubdate>Tue, 14 Jan 2025 03:20:00 +0000</pubdate><guid>https://zekixfly.github.io//merge-strings-alternately/</guid></item><item><title>JavaScript的Eventloop</title><link>https://zekixfly.github.io//eventloop/<description>事件循環(Event Loop) 參考出處: https://www.explainthis.io/zh-hant/swe/what-is-event-loop 堆疊(Stack): 後進先出(Last In First Out, LIFO) 佇列(Queue): 先進先出(First In First...</description><pubdate>Wed, 8 Jan 2025 07:32:00 +0000</pubdate><guid>https://zekixfly.github.io//eventloop/</guid></item><item><title>Container With Most Water</title><link>https://zekixfly.github.io//container-with-most-water/<description>LeetCode題目: 11. Container With Most Water My solution: /** * @param {number[]} height * @return {number} */ let maxArea = height =&amp;gt; { let maxWate...</description><pubdate>Thu, 17 Aug 2023 14:20:00 +0000</pubdate><guid>https://zekixfly.github.io//container-with-most-water/</guid></item><item><title>Longest Palindromic Substring</title><link>https://zekixfly.github.io//longest-palindromic-substring/<description>LeetCode題目: 5. Longest Palindromic Substring My solution: /** * @param {string} s * @return {string} */ let longestPalindrome = s =&amp;gt; { if(s.lengt...</description><pubdate>Tue, 6 Jun 2023 15:12:00 +0000</pubdate><guid>https://zekixfly.github.io//longest-palindromic-substring/</guid></item><item><title>Longest Substring Without Repeating Characters</title><link>https://zekixfly.github.io//longest-substring-without-repeating-characters/<description>LeetCode題目: 3. Longest Substring Without Repeating Characters My solution: /** * @param {string} s * @return {number} */ let lengthOfLongestSubstring = ...</description><pubdate>Mon, 5 Jun 2023 09:57:00 +0000</pubdate><guid>https://zekixfly.github.io//longest-substring-without-repeating-characters/</guid></item><item><title>Two Sum</title><link>https://zekixfly.github.io//two-sum/<description>LeetCode題目: 1. Two Sum My solution: /** * @param {number[]} nums * @param {number} target * @return {number[]} */ let twoSum = function(nums, target) {...</description><pubdate>Thu, 1 Jun 2023 02:32:00 +0000</pubdate><guid>https://zekixfly.github.io//two-sum/</guid></item><item><title>解決callback hell的新方法Promise</title><link>https://zekixfly.github.io//promise/<description>//方法一: 使用Promise的then方法 let fakeAjax = (url, sec) =&amp;gt; new Promise((resolve, reject) =&amp;gt; { setTimeout(() =&amp;gt; { resolve(`Ajax ${url} OK!`); ...</description><pubdate>Wed, 17 Aug 2022 11:47:00 +0000</pubdate><guid>https://zekixfly.github.io//promise/</guid></item><item><title>arguments、callee、caller是什麼?</title><link>https://zekixfly.github.io//arguments-callee-caller/<description>//arugumets是個神奇的語法，就算定義的function括號裡面不設定參數，arguments還是會儲存呼叫自己函式時裡面所帶的參數，是以類似陣列的物件儲存，此語法只能在function內使用。 function child() { console.log(&amp;quot;(arguments)呼叫ch...</description><pubdate>Wed, 14 Apr 2021 07:07:00 +0000</pubdate><guid>https://zekixfly.github.io//arguments-callee-caller/</guid></item><item><title>delete不可刪除的東西</title><link>https://zekixfly.github.io//delete/<description>//只要是宣告過後的變數都不能刪除! 如:var、let、const、function，什麼意思呢? 舉例如下: var thisVar = &amp;quot;I&amp;#x27;m Var&amp;quot;; delete thisVar; //return false let thisLet = &amp;quot;I&amp;#x27;...</description><pubdate>Tue, 13 Apr 2021 04:24:00 +0000</pubdate><guid>https://zekixfly.github.io//delete/</guid></item><item><title>bind和call、apply的差別</title><link>https://zekixfly.github.io//bind-call-apply/<description>//bind有兩種方式，第一種是綁定物件，第二種是綁定函式中的參數，綁定完會回傳綁定後的函式。 //bind第一種，綁定物件。 var msg = &amp;quot;Window(global) msg&amp;quot;; //在還沒綁定物件時，此時printLog這個函式裡的this指向的是全域的window(no...</description><pubdate>Sun, 11 Apr 2021 05:14:00 +0000</pubdate><guid>https://zekixfly.github.io//bind-call-apply/</guid></item><item><title>可替代if-else-if及switch的寫法</title><link>https://zekixfly.github.io//if-else-switch/<description>var menu = { 1: &amp;quot;檸檬雞腿飯&amp;quot;, 2: &amp;quot;香茅雞腿飯&amp;quot;, 3: &amp;quot;照燒豬肉飯&amp;quot;, 4: &amp;quot;番茄蛋包飯&amp;quot;, 5: &amp;quot;海苔蛋包飯&amp;quot;, }; console.log( `菜單:...</description><pubdate>Fri, 9 Apr 2021 17:05:00 +0000</pubdate><guid>https://zekixfly.github.io//if-else-switch/</guid></item><item><title>三元運算子 (Conditional operator)</title><link>https://zekixfly.github.io//conditional-operator/<description>//三元運算子常常被做為if的簡潔寫法 function yourAge(age) { console.log(`(三元運算子)你的年齡大於18歲嗎? ${age &amp;gt; 18 ? &amp;quot;是&amp;quot; : &amp;quot;否&amp;quot;}`); } yourAge(33); //result: (...</description><pubdate>Fri, 9 Apr 2021 14:03:00 +0000</pubdate><guid>https://zekixfly.github.io//conditional-operator/</guid></item><item><title>while與do-while的差別</title><link>https://zekixfly.github.io//while-vs-do-while/<description>var i = 5; //while是先判斷是否符合條件之後再執行裡面的語法 while (i &amp;gt; 5) { console.log(`while條件句裡的i變數目前是:${i}`); i--; } i = 5; //do-while則是先無條件執行一次裡面的語法之後，在來判斷是否符合條件...</description><pubdate>Fri, 9 Apr 2021 09:21:00 +0000</pubdate><guid>https://zekixfly.github.io//while-vs-do-while/</guid></item></channel></rss>