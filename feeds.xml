<?xml version="1.0" encoding="UTF-8" ?> <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Zeki&#39;s Note</title><link>https://zekixfly.github.io/<description>Do not ignore your intuition. Sometime, it&#39;s always right.</description><lastbuilddate>Tue, 29 Oct 2024 07:56:23 +0000</lastbuilddate><atom:link href="https://zekixfly.github.io//feeds.xml" rel="self" type="application/rss+xml"/><item><title>解決callback hell的新方法Promise</title><link>https://zekixfly.github.io//promise/<description>//方法一: 使用Promise的then方法 let fakeAjax = (url, sec) =&amp;gt; new Promise((resolve, reject) =&amp;gt; { setTimeout(() =&amp;gt; { resolve(`Ajax ${url} OK!`);</description><pubdate>Wed, 17 Aug 2022 11:47:00 +0000</pubdate><guid>https://zekixfly.github.io//promise/</guid></item><item><title>arguments、callee、caller是什麼?</title><link>https://zekixfly.github.io//arguments-callee-caller/<description>//arugumets是個神奇的語法，就算定義的function括號裡面不設定參數，arguments還是會儲存呼叫自己函式時裡面所帶的參數，是以類似陣列的物件儲存，此語法只能在function內使用。 function child() { console.log(&amp;quot;(arguments)呼叫ch</description><pubdate>Wed, 14 Apr 2021 07:07:00 +0000</pubdate><guid>https://zekixfly.github.io//arguments-callee-caller/</guid></item><item><title>delete不可刪除的東西</title><link>https://zekixfly.github.io//delete/<description>//只要是宣告過後的變數都不能刪除! 如:var、let、const、function，什麼意思呢? 舉例如下: var thisVar = &amp;quot;I&amp;#x27;m Var&amp;quot;; delete thisVar; //return false let thisLet = &amp;quot;I&amp;#x27;</description><pubdate>Tue, 13 Apr 2021 04:24:00 +0000</pubdate><guid>https://zekixfly.github.io//delete/</guid></item><item><title>bind和call、apply的差別</title><link>https://zekixfly.github.io//bind-call-apply/<description>//bind有兩種方式，第一種是綁定物件，第二種是綁定函式中的參數，綁定完會回傳綁定後的函式。 //bind第一種，綁定物件。 var msg = &amp;quot;Window(global) msg&amp;quot;; //在還沒綁定物件時，此時printLog這個函式裡的this指向的是全域的window(no</description><pubdate>Sun, 11 Apr 2021 05:14:00 +0000</pubdate><guid>https://zekixfly.github.io//bind-call-apply/</guid></item><item><title>可替代if-else-if及switch的寫法</title><link>https://zekixfly.github.io//if-else-switch/<description>var menu = { 1: &amp;quot;檸檬雞腿飯&amp;quot;, 2: &amp;quot;香茅雞腿飯&amp;quot;, 3: &amp;quot;照燒豬肉飯&amp;quot;, 4: &amp;quot;番茄蛋包飯&amp;quot;, 5: &amp;quot;海苔蛋包飯&amp;quot;, }; console.log( `菜單:</description><pubdate>Fri, 9 Apr 2021 17:05:00 +0000</pubdate><guid>https://zekixfly.github.io//if-else-switch/</guid></item><item><title>三元運算子 (Conditional operator)</title><link>https://zekixfly.github.io//conditional-operator/<description>//三元運算子常常被做為if的簡潔寫法 function yourAge(age) { console.log(`(三元運算子)你的年齡大於18歲嗎? ${age &amp;gt; 18 ? &amp;quot;是&amp;quot; : &amp;quot;否&amp;quot;}`); } yourAge(33); //result: (</description><pubdate>Fri, 9 Apr 2021 14:03:00 +0000</pubdate><guid>https://zekixfly.github.io//conditional-operator/</guid></item><item><title>while與do-while的差別</title><link>https://zekixfly.github.io//while-vs-do-while/<description>var i = 5; //while是先判斷是否符合條件之後再執行裡面的語法 while (i &amp;gt; 5) { console.log(`while條件句裡的i變數目前是:${i}`); i--; } i = 5; //do-while則是先無條件執行一次裡面的語法之後，在來判斷是否符合條件</description><pubdate>Fri, 9 Apr 2021 09:21:00 +0000</pubdate><guid>https://zekixfly.github.io//while-vs-do-while/</guid></item></channel></rss>